{
    "shortcuts": [
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "class",
                    "type": "string",
                    "variadic": false
                }
            ],
            "file": "shortcuts",
            "header": "C(string $class)",
            "name": "Datashaman\\Logic\\C",
            "href": "#C",
            "shortName": "C",
            "description": "",
            "example": "use function Datashaman\\Logic\\C;\n\n$now = new DateTime();\n\n$p = C('DateTime');\n\nvar_dump($p($now));\nvar_dump($p(12));\n",
            "output": "bool(true)\nbool(false)\n",
            "return": null,
            "summary": "<p>Creates a predicate function for checking the class of a value<\/p>",
            "gist": "https:\/\/gist.github.com\/ff0549e47f49e913dd611f7996293998"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "d",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": "null",
                    "description": null,
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                }
            ],
            "file": "shortcuts",
            "header": "D($d, callable $f = null)",
            "name": "Datashaman\\Logic\\D",
            "href": "#D",
            "shortName": "D",
            "description": "",
            "example": "use function Datashaman\\Logic\\D;\nuse function Datashaman\\Logic\\mkMaybe;\n\n$f = D(0);\necho $f(mkMaybe(null)) . PHP_EOL;\necho $f(mkMaybe(12)) . PHP_EOL;\n\n$f = D(0, function ($value) {\n    return $value * 2;\n});\necho $f(mkMaybe(null)) . PHP_EOL;\necho $f(mkMaybe(12)) . PHP_EOL;\n",
            "output": "0\n12\n0\n24\n",
            "return": null,
            "summary": "<p>Creates a function that calls a function on a Just (it should return the value)\nand returns a default on a Nothing value.<\/p>",
            "gist": "https:\/\/gist.github.com\/ea26db70ac47acde36b76fb481085d42"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "F()",
            "name": "Datashaman\\Logic\\F",
            "href": "#F",
            "shortName": "F",
            "description": "<pre>\nuse Datashaman\\Logic\\F;\n\n$f = F();\n\nvar_dump($f(12));\nvar_dump($f(null));",
            "example": null,
            "output": "",
            "return": null,
            "summary": "<p>Create a function that always returns false<\/p>"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "I()",
            "name": "Datashaman\\Logic\\I",
            "href": "#I",
            "shortName": "I",
            "description": "",
            "example": "use function Datashaman\\Logic\\I;\n\n$f = I();\n\nvar_dump($f(null));\nvar_dump($f(12));\nvar_dump($f('hello world'));\n",
            "output": "NULL\nint(12)\nstring(11) \"hello world\"\n",
            "return": null,
            "summary": "<p>Creates an identity function (returns its value unchanged).<\/p>",
            "gist": "https:\/\/gist.github.com\/d3d702b626e9e3a3c0e30fd01a24278d"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "J()",
            "name": "Datashaman\\Logic\\J",
            "href": "#J",
            "shortName": "J",
            "description": "",
            "example": "use function Datashaman\\Logic\\J;\nuse function Datashaman\\Logic\\repr;\n\n$f = J();\n\necho repr($f(12)) . PHP_EOL;\n",
            "output": "<Just 12>\n",
            "return": null,
            "summary": "<p>Creates a function which wraps a value with Just.<\/p>",
            "gist": "https:\/\/gist.github.com\/b4bbb7a46707309611a9911f14f3d0fe"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "arg",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "shortcuts",
            "header": "K($arg)",
            "name": "Datashaman\\Logic\\K",
            "href": "#K",
            "shortName": "K",
            "description": "",
            "example": "use function Datashaman\\Logic\\K;\n\n$f = K(12);\n\nvar_dump($f(null));\nvar_dump($f(0));\nvar_dump($f('hello world'));\n",
            "output": "int(12)\nint(12)\nint(12)\n",
            "return": null,
            "summary": "<p>Creates a constant function (returns the same value regardless of argument).<\/p>",
            "gist": "https:\/\/gist.github.com\/75e4c7b7006600c76c60085967d3ca64"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "conditions",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "shortcuts",
            "header": "M(...$conditions)",
            "name": "Datashaman\\Logic\\M",
            "href": "#M",
            "shortName": "M",
            "description": "<ul>\n<li>loops through the provided conditions<\/li>\n<li>calls the first array item (the predicate function) with the subject<\/li>\n<li>if the result is true, call the second array item (the callback function) with the subject<\/li>\n<li>if the result is false, go down the list of conditions<\/li>\n<li>all cases must be handled or an exception is thrown<\/li>\n<\/ul>",
            "example": "use Datashaman\\Logic\\Just;\nuse Datashaman\\Logic\\Nothing;\n\nuse function Datashaman\\Logic\\{K, J, M, N, T};\nuse function Datashaman\\Logic\\mkJust;\nuse function Datashaman\\Logic\\mkNothing;\nuse function Datashaman\\Logic\\repr;\n\n\/\/ If a null value is matched, return Nothing\n\/\/ Else return a new Just value\n$match = M(\n    [\n        'is_null',\n        function () {\n            return new Nothing();\n        }\n    ],\n    [\n        function () {\n            return true;\n        },\n        function ($value) {\n            return new Just($value);\n        }\n    ]\n);\n\necho repr($match(null)) . PHP_EOL;\necho repr($match(12)) . PHP_EOL;\n\n\/\/ The above can be written more succinctly using\n\/\/ shortcuts. K makes a function that returns the supplied\n\/\/ parameter to every function call, always returning a\n\/\/ constant value. Here it always evaluates to true, which\n\/\/ makes it perfect for the else branch in a conditional\n\/\/ expression.\n\n\/\/ mkJust and mkNothing, when called with no parameters, return\n\/\/ a factory function that does the same as the above.\n\n$match = M(\n    ['is_null', mkNothing()],\n    [K(true), mkJust()]\n);\n\necho repr($match(null)) . PHP_EOL;\necho repr($match(12)) . PHP_EOL;\n\n\/\/ The above can be written even MORE succinctly as follows.\n\/\/ Whether this is wise is another question...\n$match = M(\n    ['is_null', N()],\n    [T(), J()]\n);\n\necho repr($match(null)) . PHP_EOL;\necho repr($match(12)) . PHP_EOL;\n",
            "output": "<Nothing>\n<Just 12>\n<Nothing>\n<Just 12>\n<Nothing>\n<Just 12>\n",
            "return": null,
            "summary": "<p>Creates a match function which takes one parameter (the subject):<\/p>",
            "gist": "https:\/\/gist.github.com\/f04b7ee06e0a2ddadff2a0970066610c"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "N()",
            "name": "Datashaman\\Logic\\N",
            "href": "#N",
            "shortName": "N",
            "description": "",
            "example": "use function Datashaman\\Logic\\N;\nuse function Datashaman\\Logic\\repr;\n\n$f = N();\n\necho repr($f(12)) . PHP_EOL;\n",
            "output": "<Nothing>\n",
            "return": null,
            "summary": "<p>Creates a function which returns Nothing<\/p>",
            "gist": "https:\/\/gist.github.com\/8a0f21064e9a1d86ad88f51d194c5def"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "shortcuts",
            "header": "P(...$args)",
            "name": "Datashaman\\Logic\\P",
            "href": "#P",
            "shortName": "P",
            "description": "",
            "example": null,
            "output": "",
            "return": {
                "type": "callable",
                "description": ""
            },
            "summary": "<p>An alias for creating predicate functions.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "",
                    "name": "x",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": "",
                    "name": "y",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": "",
                    "name": "z",
                    "type": "mixed",
                    "variadic": false
                }
            ],
            "file": "shortcuts",
            "header": "S(callable $x, callable $y, mixed $z)",
            "name": "Datashaman\\Logic\\S",
            "href": "#S",
            "shortName": "S",
            "description": "",
            "example": null,
            "output": "",
            "return": {
                "type": "callable",
                "description": ""
            },
            "summary": "<p>Application (not sure what to do with this yet)<\/p>"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "T()",
            "name": "Datashaman\\Logic\\T",
            "href": "#T",
            "shortName": "T",
            "description": "<pre>\nuse Datashaman\\Logic\\T;\n\n$f = T();\n\nvar_dump($f(12));\nvar_dump($f(null));",
            "example": null,
            "output": "",
            "return": null,
            "summary": "<p>Create a function that always returns true<\/p>"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "V()",
            "name": "Datashaman\\Logic\\V",
            "href": "#V",
            "shortName": "V",
            "description": "",
            "example": "use function Datashaman\\Logic\\mkJust;\nuse function Datashaman\\Logic\\V;\n\n$f = V();\n$j = mkJust(12);\n\nvar_dump($j);\nvar_dump($f($j));\n",
            "output": "object(Datashaman\\Logic\\Just)#96 (1) {\n  [\"value\"]=>\n  int(12)\n}\nint(12)\n",
            "return": null,
            "summary": "<p>Creates a function which returns the unwrapped monad value.<\/p>",
            "gist": "https:\/\/gist.github.com\/301ba3226597d3d4fc26e102ad168fea"
        }
    ],
    "maybe": [
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "ms",
                    "type": "array",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "catMaybes(array $ms)",
            "name": "Datashaman\\Logic\\catMaybes",
            "href": "#catMaybes",
            "shortName": "catMaybes"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "m",
                    "type": "Datashaman\\Logic\\Maybe",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "fromJust(Datashaman\\Logic\\Maybe $m)",
            "name": "Datashaman\\Logic\\fromJust",
            "href": "#fromJust",
            "shortName": "fromJust"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "d",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "m",
                    "type": "Datashaman\\Logic\\Maybe",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "fromMaybe($d, Datashaman\\Logic\\Maybe $m)",
            "name": "Datashaman\\Logic\\fromMaybe",
            "href": "#fromMaybe",
            "shortName": "fromMaybe"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "m",
                    "type": "Datashaman\\Logic\\Maybe",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "isJust(Datashaman\\Logic\\Maybe $m)",
            "name": "Datashaman\\Logic\\isJust",
            "href": "#isJust",
            "shortName": "isJust"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "m",
                    "type": "Datashaman\\Logic\\Maybe",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "isNothing(Datashaman\\Logic\\Maybe $m)",
            "name": "Datashaman\\Logic\\isNothing",
            "href": "#isNothing",
            "shortName": "isNothing"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "x",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "listToMaybe($x)",
            "name": "Datashaman\\Logic\\listToMaybe",
            "href": "#listToMaybe",
            "shortName": "listToMaybe"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "a",
                    "type": "array",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "mapMaybe(callable $f, array $a)",
            "name": "Datashaman\\Logic\\mapMaybe",
            "href": "#mapMaybe",
            "shortName": "mapMaybe"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "b",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "a",
                    "type": "Datashaman\\Logic\\Maybe",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "maybe($b, callable $f, Datashaman\\Logic\\Maybe $a)",
            "name": "Datashaman\\Logic\\maybe",
            "href": "#maybe",
            "shortName": "maybe"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "m",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "maybeToList($m)",
            "name": "Datashaman\\Logic\\maybeToList",
            "href": "#maybeToList",
            "shortName": "maybeToList"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "maybe",
            "header": "mkJust(...$args)",
            "name": "Datashaman\\Logic\\mkJust",
            "href": "#mkJust",
            "shortName": "mkJust"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "maybe",
            "header": "mkMaybe(...$args)",
            "name": "Datashaman\\Logic\\mkMaybe",
            "href": "#mkMaybe",
            "shortName": "mkMaybe"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "maybe",
            "header": "mkNothing(...$args)",
            "name": "Datashaman\\Logic\\mkNothing",
            "href": "#mkNothing",
            "shortName": "mkNothing"
        }
    ],
    "either": [
        {
            "arguments": [
                {
                    "default": "null",
                    "description": null,
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": "null",
                    "description": null,
                    "name": "g",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "e",
                    "type": "Datashaman\\Logic\\Either",
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "either(callable $f = null, callable $g = null, Datashaman\\Logic\\Either $e)",
            "name": "Datashaman\\Logic\\either",
            "href": "#either",
            "shortName": "either"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "d",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "e",
                    "type": "Datashaman\\Logic\\Either",
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "fromLeft($d, Datashaman\\Logic\\Either $e)",
            "name": "Datashaman\\Logic\\fromLeft",
            "href": "#fromLeft",
            "shortName": "fromLeft"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "d",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "e",
                    "type": "Datashaman\\Logic\\Either",
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "fromRight($d, Datashaman\\Logic\\Either $e)",
            "name": "Datashaman\\Logic\\fromRight",
            "href": "#fromRight",
            "shortName": "fromRight"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "e",
                    "type": "Datashaman\\Logic\\Either",
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "isLeft(Datashaman\\Logic\\Either $e)",
            "name": "Datashaman\\Logic\\isLeft",
            "href": "#isLeft",
            "shortName": "isLeft"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "e",
                    "type": "Datashaman\\Logic\\Either",
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "isRight(Datashaman\\Logic\\Either $e)",
            "name": "Datashaman\\Logic\\isRight",
            "href": "#isRight",
            "shortName": "isRight"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "es",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "lefts($es)",
            "name": "Datashaman\\Logic\\lefts",
            "href": "#lefts",
            "shortName": "lefts"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "either",
            "header": "mkLeft(...$args)",
            "name": "Datashaman\\Logic\\mkLeft",
            "href": "#mkLeft",
            "shortName": "mkLeft"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "either",
            "header": "mkRight(...$args)",
            "name": "Datashaman\\Logic\\mkRight",
            "href": "#mkRight",
            "shortName": "mkRight"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "es",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "partitionEithers($es)",
            "name": "Datashaman\\Logic\\partitionEithers",
            "href": "#partitionEithers",
            "shortName": "partitionEithers"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "es",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "rights($es)",
            "name": "Datashaman\\Logic\\rights",
            "href": "#rights",
            "shortName": "rights"
        }
    ],
    "predicates": [
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "x",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "class",
                    "type": "string",
                    "variadic": false
                }
            ],
            "file": "predicates",
            "header": "isClass($x, string $class)",
            "name": "Datashaman\\Logic\\isClass",
            "href": "#isClass",
            "shortName": "isClass"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "x",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "type",
                    "type": "string",
                    "variadic": false
                }
            ],
            "file": "predicates",
            "header": "isType($x, string $type)",
            "name": "Datashaman\\Logic\\isType",
            "href": "#isType",
            "shortName": "isType"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "predicates",
            "header": "mkPredicate(...$args)",
            "name": "Datashaman\\Logic\\mkPredicate",
            "href": "#mkPredicate",
            "shortName": "mkPredicate"
        }
    ],
    "chain": [
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "value",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "chain",
            "header": "mkChain($value)",
            "name": "Datashaman\\Logic\\mkChain",
            "href": "#mkChain",
            "shortName": "mkChain"
        }
    ],
    "list": [
        {
            "arguments": [
                {
                    "default": "[]",
                    "description": null,
                    "name": "value",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "list",
            "header": "mkList($value = [])",
            "name": "Datashaman\\Logic\\mkList",
            "href": "#mkList",
            "shortName": "mkList"
        }
    ]
}
