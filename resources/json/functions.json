{
    "shortcuts": [
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "class",
                    "type": "string",
                    "variadic": false
                }
            ],
            "file": "shortcuts",
            "header": "C(string $class)",
            "name": "Datashaman\\Logic\\C",
            "href": "#C",
            "shortName": "C",
            "description": "",
            "example": "use function Datashaman\\Logic\\C;\n\n$now = new DateTime();\n\n$p = C('DateTime');\n\nvar_dump($p($now));\nvar_dump($p(12));\n",
            "output": "bool(true)\nbool(false)\n",
            "return": null,
            "summary": "<p>Creates a predicate function for checking the class of a value<\/p>",
            "gist": "https:\/\/gist.github.com\/ff0549e47f49e913dd611f7996293998"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "d",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": "null",
                    "description": null,
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                }
            ],
            "file": "shortcuts",
            "header": "D($d, callable $f = null)",
            "name": "Datashaman\\Logic\\D",
            "href": "#D",
            "shortName": "D",
            "description": "",
            "example": "use function Datashaman\\Logic\\D;\nuse function Datashaman\\Logic\\mkMaybe;\n\n$f = D(0);\necho $f(mkMaybe(null)) . PHP_EOL;\necho $f(mkMaybe(12)) . PHP_EOL;\n\n$f = D(0, function ($value) {\n    return $value * 2;\n});\necho $f(mkMaybe(null)) . PHP_EOL;\necho $f(mkMaybe(12)) . PHP_EOL;\n",
            "output": "0\n12\n0\n24\n",
            "return": null,
            "summary": "<p>Creates a function that calls a function on a Just (it should return the value)\nand returns a default on a Nothing value.<\/p>",
            "gist": "https:\/\/gist.github.com\/ea26db70ac47acde36b76fb481085d42"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "shortcuts",
            "header": "Do_(...$args)",
            "name": "Datashaman\\Logic\\Do_",
            "href": "#Do_",
            "shortName": "Do_",
            "description": "",
            "example": "use function Datashaman\\Logic\\Do_;\nuse function Datashaman\\Logic\\mkLeft;\nuse function Datashaman\\Logic\\mkRight;\nuse function Datashaman\\Logic\\repr;\n\nfunction resolveEither($value) {\n    return is_numeric($value) ? mkRight($value) : mkLeft('parse error');\n}\n\necho repr(Do_(\n    [\n        'x' => resolveEither(3),\n        'y' => resolveEither(5),\n    ],\n    function ($c) {\n        return mkRight($c['x'] + $c['y']);\n    }\n)) . PHP_EOL;\n\necho repr(Do_(\n    [\n        'x' => resolveEither('m'),\n        'y' => resolveEither(5),\n    ],\n    function ($c) {\n        return mkRight($c['x'] + $c['y']);\n    }\n)) . PHP_EOL;\n",
            "output": "<Right 8>\n<Left \"parse error\">\n",
            "return": null,
            "summary": "<p>Resolve a chain of monadic values into a context and call a result function with that context.<\/p>",
            "gist": "https:\/\/gist.github.com\/406f4cd552687fdea3ed383df02bc485"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "F()",
            "name": "Datashaman\\Logic\\F",
            "href": "#F",
            "shortName": "F",
            "description": "",
            "example": "use function Datashaman\\Logic\\F;\n\n$f = F();\n\nvar_dump($f(12));\nvar_dump($f(null));\n",
            "output": "bool(false)\nbool(false)\n",
            "return": null,
            "summary": "<p>Create a function that always returns false<\/p>",
            "gist": "https:\/\/gist.github.com\/e7fe67fe09c4ee73ad177ad44d43e548"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "I()",
            "name": "Datashaman\\Logic\\I",
            "href": "#I",
            "shortName": "I",
            "description": "",
            "example": "use function Datashaman\\Logic\\I;\n\n$f = I();\n\nvar_dump($f(null));\nvar_dump($f(12));\nvar_dump($f('hello world'));\n",
            "output": "NULL\nint(12)\nstring(11) \"hello world\"\n",
            "return": null,
            "summary": "<p>Creates an identity function (returns its value unchanged).<\/p>",
            "gist": "https:\/\/gist.github.com\/d3d702b626e9e3a3c0e30fd01a24278d"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "J()",
            "name": "Datashaman\\Logic\\J",
            "href": "#J",
            "shortName": "J",
            "description": "",
            "example": "use function Datashaman\\Logic\\J;\nuse function Datashaman\\Logic\\repr;\n\n$f = J();\n\necho repr($f(12)) . PHP_EOL;\n",
            "output": "<Just 12>\n",
            "return": null,
            "summary": "<p>Creates a function which wraps a value with Just.<\/p>",
            "gist": "https:\/\/gist.github.com\/b4bbb7a46707309611a9911f14f3d0fe"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "arg",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "shortcuts",
            "header": "K($arg)",
            "name": "Datashaman\\Logic\\K",
            "href": "#K",
            "shortName": "K",
            "description": "",
            "example": "use function Datashaman\\Logic\\K;\n\n$f = K(12);\n\nvar_dump($f(null));\nvar_dump($f(0));\nvar_dump($f('hello world'));\n",
            "output": "int(12)\nint(12)\nint(12)\n",
            "return": null,
            "summary": "<p>Creates a constant function (returns the same value regardless of argument).<\/p>",
            "gist": "https:\/\/gist.github.com\/75e4c7b7006600c76c60085967d3ca64"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "conditions",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "shortcuts",
            "header": "M(...$conditions)",
            "name": "Datashaman\\Logic\\M",
            "href": "#M",
            "shortName": "M",
            "description": "<ul>\n<li>loops through the provided conditions<\/li>\n<li>calls the first array item (the predicate function) with the subject<\/li>\n<li>if the result is true, call the second array item (the callback function) with the subject<\/li>\n<li>if the result is false, go down the list of conditions<\/li>\n<li>all cases must be handled or an exception is thrown<\/li>\n<\/ul>",
            "example": "use Datashaman\\Logic\\Just;\nuse Datashaman\\Logic\\Nothing;\n\nuse function Datashaman\\Logic\\{K, J, M, N, T};\nuse function Datashaman\\Logic\\mkJust;\nuse function Datashaman\\Logic\\mkNothing;\nuse function Datashaman\\Logic\\repr;\n\n\/\/ If a null value is matched, return Nothing\n\/\/ Else return a new Just value\n$match = M(\n    [\n        'is_null',\n        function () {\n            return new Nothing();\n        }\n    ],\n    [\n        function () {\n            return true;\n        },\n        function ($value) {\n            return new Just($value);\n        }\n    ]\n);\n\necho repr($match(null)) . PHP_EOL;\necho repr($match(12)) . PHP_EOL;\n\n\/\/ The above can be written more succinctly using\n\/\/ shortcuts. K makes a function that returns the supplied\n\/\/ parameter to every function call, always returning a\n\/\/ constant value. Here it always evaluates to true, which\n\/\/ makes it perfect for the else branch in a conditional\n\/\/ expression.\n\n\/\/ mkJust and mkNothing, when called with no parameters, return\n\/\/ a factory function that does the same as the above.\n\n$match = M(\n    ['is_null', mkNothing()],\n    [K(true), mkJust()]\n);\n\necho repr($match(null)) . PHP_EOL;\necho repr($match(12)) . PHP_EOL;\n\n\/\/ The above can be written even MORE succinctly as follows.\n\/\/ Whether this is wise is another question...\n$match = M(\n    ['is_null', N()],\n    [T(), J()]\n);\n\necho repr($match(null)) . PHP_EOL;\necho repr($match(12)) . PHP_EOL;\n",
            "output": "<Nothing>\n<Just 12>\n<Nothing>\n<Just 12>\n<Nothing>\n<Just 12>\n",
            "return": null,
            "summary": "<p>Creates a match function which takes one parameter (the subject):<\/p>",
            "gist": "https:\/\/gist.github.com\/f04b7ee06e0a2ddadff2a0970066610c"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "N()",
            "name": "Datashaman\\Logic\\N",
            "href": "#N",
            "shortName": "N",
            "description": "",
            "example": "use function Datashaman\\Logic\\N;\nuse function Datashaman\\Logic\\repr;\n\n$f = N();\n\necho repr($f(12)) . PHP_EOL;\n",
            "output": "<Nothing>\n",
            "return": null,
            "summary": "<p>Creates a function which returns Nothing<\/p>",
            "gist": "https:\/\/gist.github.com\/8a0f21064e9a1d86ad88f51d194c5def"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "shortcuts",
            "header": "P(...$args)",
            "name": "Datashaman\\Logic\\P",
            "href": "#P",
            "shortName": "P",
            "description": "",
            "example": null,
            "output": "",
            "return": {
                "type": "callable",
                "description": ""
            },
            "summary": "<p>An alias for creating predicate functions.<\/p>"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": "",
                    "name": "x",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": "",
                    "name": "y",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": "",
                    "name": "z",
                    "type": "mixed",
                    "variadic": false
                }
            ],
            "file": "shortcuts",
            "header": "S(callable $x, callable $y, mixed $z)",
            "name": "Datashaman\\Logic\\S",
            "href": "#S",
            "shortName": "S",
            "description": "",
            "example": null,
            "output": "",
            "return": {
                "type": "callable",
                "description": ""
            },
            "summary": "<p>Application (not sure what to do with this yet)<\/p>"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "T()",
            "name": "Datashaman\\Logic\\T",
            "href": "#T",
            "shortName": "T",
            "description": "",
            "example": "use function Datashaman\\Logic\\T;\n\n$f = T();\n\nvar_dump($f(12));\nvar_dump($f(null));\n",
            "output": "bool(true)\nbool(true)\n",
            "return": null,
            "summary": "<p>Create a function that always returns true<\/p>",
            "gist": "https:\/\/gist.github.com\/20f35cd66bbc25f3b60df6ba980f1bbc"
        },
        {
            "arguments": [],
            "file": "shortcuts",
            "header": "V()",
            "name": "Datashaman\\Logic\\V",
            "href": "#V",
            "shortName": "V",
            "description": "",
            "example": "use function Datashaman\\Logic\\mkJust;\nuse function Datashaman\\Logic\\repr;\nuse function Datashaman\\Logic\\V;\n\n$f = V();\n$j = mkJust(12);\n\necho repr($j) . PHP_EOL;\necho repr($f($j)) . PHP_EOL;\n",
            "output": "<Just 12>\n12\n",
            "return": null,
            "summary": "<p>Creates a function which returns the unwrapped monad value.<\/p>",
            "gist": "https:\/\/gist.github.com\/301ba3226597d3d4fc26e102ad168fea"
        }
    ],
    "maybe": [
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "ms",
                    "type": "array",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "catMaybes(array $ms)",
            "name": "Datashaman\\Logic\\catMaybes",
            "href": "#catMaybes",
            "shortName": "catMaybes",
            "description": "",
            "example": "use function Datashaman\\Logic\\catMaybes;\nuse function Datashaman\\Logic\\mkMaybe;\nuse function Datashaman\\Logic\\repr;\n\n$ms = [mkMaybe(null), mkMaybe(12), mkMaybe(23), mkMaybe(null), mkMaybe(null)];\n\necho repr(catMaybes($ms)) . PHP_EOL;\n",
            "output": "<List_ [<Just 12>, <Just 23>]>\n",
            "return": null,
            "summary": "<p>The catMaybes function takes a list of Maybes and returns a List_ of all the Just values.<\/p>",
            "gist": "https:\/\/gist.github.com\/23c511a38a2d506e6d89313025b77d0c"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "m",
                    "type": "Datashaman\\Logic\\Maybe",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "fromJust(Datashaman\\Logic\\Maybe $m)",
            "name": "Datashaman\\Logic\\fromJust",
            "href": "#fromJust",
            "shortName": "fromJust",
            "description": "",
            "example": "use function Datashaman\\Logic\\fromJust;\nuse function Datashaman\\Logic\\mkMaybe;\nuse function Datashaman\\Logic\\repr;\n\n$s = mkMaybe('hello');\n$n = mkMaybe(null);\n\necho repr(fromJust($s)) . PHP_EOL;\n\nfromJust($n);\n",
            "output": "\"hello\"\nException: Maybe.fromJust: Nothing in \/home\/marlinf\/Desktop\/logic\/src\/maybe.php:66\nStack trace:\n#0 \/home\/marlinf\/Desktop\/logic\/generate-functions(196) : eval()'d code(10): Datashaman\\Logic\\fromJust(Object(Datashaman\\Logic\\Nothing))\n#1 \/home\/marlinf\/Desktop\/logic\/generate-functions(196): eval()\n#2 [internal function]: {closure}('datashaman\\\\logi...')\n#3 \/home\/marlinf\/Desktop\/logic\/generate-functions(228): array_map(Object(Closure), Array)\n#4 {main}\n",
            "return": null,
            "summary": "<p>The fromJust function extracts the element out of a Just and throws an error if its argument is Nothing.<\/p>",
            "gist": "https:\/\/gist.github.com\/50607eac2ef927494a6cc0de3062766b"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "d",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "m",
                    "type": "Datashaman\\Logic\\Maybe",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "fromMaybe($d, Datashaman\\Logic\\Maybe $m)",
            "name": "Datashaman\\Logic\\fromMaybe",
            "href": "#fromMaybe",
            "shortName": "fromMaybe",
            "description": "",
            "example": "use function Datashaman\\Logic\\fromMaybe;\nuse function Datashaman\\Logic\\mkMaybe;\nuse function Datashaman\\Logic\\repr;\n\necho repr(fromMaybe(\"\", mkMaybe('Hello World'))) . PHP_EOL;\necho repr(fromMaybe(\"\", mkMaybe(null))) . PHP_EOL;\n",
            "output": "\"Hello World\"\n\"\"\n",
            "return": null,
            "summary": "<p>The fromMaybe function takes a default value and and Maybe value. If the Maybe is Nothing, it returns the default values; otherwise, it returns the value contained in the Maybe.<\/p>",
            "gist": "https:\/\/gist.github.com\/49e9c78bc0b2479856514f2526bfc7e5"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "m",
                    "type": "Datashaman\\Logic\\Maybe",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "isJust(Datashaman\\Logic\\Maybe $m)",
            "name": "Datashaman\\Logic\\isJust",
            "href": "#isJust",
            "shortName": "isJust"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "m",
                    "type": "Datashaman\\Logic\\Maybe",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "isNothing(Datashaman\\Logic\\Maybe $m)",
            "name": "Datashaman\\Logic\\isNothing",
            "href": "#isNothing",
            "shortName": "isNothing"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "x",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "listToMaybe($x)",
            "name": "Datashaman\\Logic\\listToMaybe",
            "href": "#listToMaybe",
            "shortName": "listToMaybe"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "a",
                    "type": "array",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "mapMaybe(callable $f, array $a)",
            "name": "Datashaman\\Logic\\mapMaybe",
            "href": "#mapMaybe",
            "shortName": "mapMaybe"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "b",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "a",
                    "type": "Datashaman\\Logic\\Maybe",
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "maybe($b, callable $f, Datashaman\\Logic\\Maybe $a)",
            "name": "Datashaman\\Logic\\maybe",
            "href": "#maybe",
            "shortName": "maybe"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "m",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "maybe",
            "header": "maybeToList($m)",
            "name": "Datashaman\\Logic\\maybeToList",
            "href": "#maybeToList",
            "shortName": "maybeToList"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "maybe",
            "header": "mkJust(...$args)",
            "name": "Datashaman\\Logic\\mkJust",
            "href": "#mkJust",
            "shortName": "mkJust"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "maybe",
            "header": "mkMaybe(...$args)",
            "name": "Datashaman\\Logic\\mkMaybe",
            "href": "#mkMaybe",
            "shortName": "mkMaybe"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "maybe",
            "header": "mkNothing(...$args)",
            "name": "Datashaman\\Logic\\mkNothing",
            "href": "#mkNothing",
            "shortName": "mkNothing"
        }
    ],
    "helpers": [
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "helpers",
            "header": "curry(callable $f, ...$args)",
            "name": "Datashaman\\Logic\\curry",
            "href": "#curry",
            "shortName": "curry",
            "description": "",
            "example": "use function Datashaman\\Logic\\curry;\n\n$times = function ($x, $y) {\n    return $x * $y;\n};\n\n$double = curry($times, 2);\n$triple = curry($times, 3);\n\necho $double(4) . PHP_EOL;\necho $triple(4) . PHP_EOL;\n",
            "output": "8\n12\n",
            "return": null,
            "summary": "<p>Curry a callable.<\/p>",
            "gist": "https:\/\/gist.github.com\/0fc03b73bc222322e0ce43cda6fa2c09"
        }
    ],
    "either": [
        {
            "arguments": [
                {
                    "default": "null",
                    "description": null,
                    "name": "f",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": "null",
                    "description": null,
                    "name": "g",
                    "type": "callable",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "e",
                    "type": "Datashaman\\Logic\\Either",
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "either(callable $f = null, callable $g = null, Datashaman\\Logic\\Either $e)",
            "name": "Datashaman\\Logic\\either",
            "href": "#either",
            "shortName": "either",
            "description": "<p>If the either monad is a right, call the second callable with the monad value.<\/p>",
            "example": "use function Datashaman\\Logic\\curry;\nuse function Datashaman\\Logic\\either;\nuse function Datashaman\\Logic\\mkLeft;\nuse function Datashaman\\Logic\\mkRight;\n\n$s = mkLeft('foo');\n$n = mkRight(3);\n\necho either(\n    function ($value) {\n        return strlen($value);\n    },\n    function ($value) {\n        return $value * 2;\n    },\n    $s\n) . PHP_EOL;\n\necho either(\n    function ($value) {\n        return strlen($value);\n    },\n    function ($value) {\n        return $value * 2;\n    },\n    $n\n) . PHP_EOL;\n\n\/\/ Or use currying\n\n$f = curry(\n    'Datashaman\\Logic\\either',\n    function ($value) {\n        return strlen($value);\n    },\n    function ($value) {\n        return $value * 2;\n    }\n);\n\necho $f($s) . PHP_EOL;\necho $f($n) . PHP_EOL;\n",
            "output": "3\n6\n3\n6\n",
            "return": null,
            "summary": "<p>If the either monad is a Left, call the first callable with the monad value.<\/p>",
            "gist": "https:\/\/gist.github.com\/2fcc5e72297e0f60022557f801020ce8"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "d",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "e",
                    "type": "Datashaman\\Logic\\Either",
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "fromLeft($d, Datashaman\\Logic\\Either $e)",
            "name": "Datashaman\\Logic\\fromLeft",
            "href": "#fromLeft",
            "shortName": "fromLeft",
            "description": "",
            "example": "use function Datashaman\\Logic\\fromLeft;\nuse function Datashaman\\Logic\\mkLeft;\nuse function Datashaman\\Logic\\mkRight;\n\n$err = mkLeft('You are not authorized');\n$ok = mkRight('You are authorized');\n\necho fromLeft('There was no error', $err) . PHP_EOL;\necho fromLeft('There was no error', $ok) . PHP_EOL;\n",
            "output": "You are not authorized\nThere was no error\n",
            "return": null,
            "summary": "<p>Return a Left value or a default if not Left.<\/p>",
            "gist": "https:\/\/gist.github.com\/9a781ad5668df95a77244acf7aa530bd"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "d",
                    "type": false,
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "e",
                    "type": "Datashaman\\Logic\\Either",
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "fromRight($d, Datashaman\\Logic\\Either $e)",
            "name": "Datashaman\\Logic\\fromRight",
            "href": "#fromRight",
            "shortName": "fromRight",
            "description": "",
            "example": "use function Datashaman\\Logic\\fromRight;\nuse function Datashaman\\Logic\\mkLeft;\nuse function Datashaman\\Logic\\mkRight;\n\n$err = mkLeft('You are not authorized');\n$ok = mkRight('You are authorized');\n\necho fromRight('There was an error', $err) . PHP_EOL;\necho fromRight('There was an error', $ok) . PHP_EOL;\n",
            "output": "There was an error\nYou are authorized\n",
            "return": null,
            "summary": "<p>Return a Right value or a default if not Right.<\/p>",
            "gist": "https:\/\/gist.github.com\/b7e5b52198343d618b59cc8c63e435cd"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "e",
                    "type": "Datashaman\\Logic\\Either",
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "isLeft(Datashaman\\Logic\\Either $e)",
            "name": "Datashaman\\Logic\\isLeft",
            "href": "#isLeft",
            "shortName": "isLeft",
            "description": "",
            "example": "use function Datashaman\\Logic\\isLeft;\nuse function Datashaman\\Logic\\mkLeft;\nuse function Datashaman\\Logic\\mkRight;\n\n$err = mkLeft('Error');\n$ok = mkRight('OK');\n\nvar_dump(isLeft($err));\nvar_dump(isLeft($ok));\n",
            "output": "bool(true)\nbool(false)\n",
            "return": null,
            "summary": "<p>Is an either value a Left value.<\/p>",
            "gist": "https:\/\/gist.github.com\/b5a6dbc24e23cbc1dbec0af010c70bcd"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "e",
                    "type": "Datashaman\\Logic\\Either",
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "isRight(Datashaman\\Logic\\Either $e)",
            "name": "Datashaman\\Logic\\isRight",
            "href": "#isRight",
            "shortName": "isRight",
            "description": "",
            "example": "use function Datashaman\\Logic\\isRight;\nuse function Datashaman\\Logic\\mkLeft;\nuse function Datashaman\\Logic\\mkRight;\n\n$err = mkLeft('Error');\n$ok = mkRight('OK');\n\nvar_dump(isRight($err));\nvar_dump(isRight($ok));\n",
            "output": "bool(false)\nbool(true)\n",
            "return": null,
            "summary": "<p>Is an either value a Right value.<\/p>",
            "gist": "https:\/\/gist.github.com\/0755a7cf6fbe527e58a37ce73631fac2"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "es",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "lefts($es)",
            "name": "Datashaman\\Logic\\lefts",
            "href": "#lefts",
            "shortName": "lefts",
            "description": "",
            "example": "use function Datashaman\\Logic\\lefts;\nuse function Datashaman\\Logic\\mkLeft;\nuse function Datashaman\\Logic\\mkRight;\nuse function Datashaman\\Logic\\repr;\n\n$es = [mkLeft('ERR'), mkRight('OK'), mkRight('OK Too'), mkLeft('ERR 13')];\n\necho repr(lefts($es)) . PHP_EOL;\n",
            "output": "<List_ [<Left \"ERR\">, <Left \"ERR 13\">]>\n",
            "return": null,
            "summary": "<p>Return a List_ of the lefts in a list of eithers.<\/p>",
            "gist": "https:\/\/gist.github.com\/3cf16096f1c5f651c88d82dd608171eb"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "either",
            "header": "mkLeft(...$args)",
            "name": "Datashaman\\Logic\\mkLeft",
            "href": "#mkLeft",
            "shortName": "mkLeft",
            "description": "",
            "example": "use function Datashaman\\Logic\\mkLeft;\nuse function Datashaman\\Logic\\repr;\n\n$err = mkLeft('You are not authorized');\n\necho repr($err) . PHP_EOL;\n\n$f = mkLeft();\n\necho repr($f('You are not authorized')) . PHP_EOL;\n",
            "output": "<Left \"You are not authorized\">\n<Left \"You are not authorized\">\n",
            "return": null,
            "summary": "<p>Make a Left value. If no arguments are supplied, return a function which creates Left values.<\/p>",
            "gist": "https:\/\/gist.github.com\/15946adb29bb8c294f11bd165a53a9a8"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "either",
            "header": "mkRight(...$args)",
            "name": "Datashaman\\Logic\\mkRight",
            "href": "#mkRight",
            "shortName": "mkRight",
            "description": "",
            "example": "use function Datashaman\\Logic\\mkRight;\nuse function Datashaman\\Logic\\repr;\n\n$ok = mkRight('You are authorized');\n\necho repr($ok) . PHP_EOL;\n\n$f = mkRight();\n\necho repr($f('You are authorized')) . PHP_EOL;\n",
            "output": "<Right \"You are authorized\">\n<Right \"You are authorized\">\n",
            "return": null,
            "summary": "<p>Make a Right value. If no arguments are supplied, return a function which creates Right values.<\/p>",
            "gist": "https:\/\/gist.github.com\/da479da4f36f004629f3dc6022fc91dc"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "es",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "partitionEithers($es)",
            "name": "Datashaman\\Logic\\partitionEithers",
            "href": "#partitionEithers",
            "shortName": "partitionEithers"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "es",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "either",
            "header": "rights($es)",
            "name": "Datashaman\\Logic\\rights",
            "href": "#rights",
            "shortName": "rights",
            "description": "",
            "example": "use function Datashaman\\Logic\\mkLeft;\nuse function Datashaman\\Logic\\mkRight;\nuse function Datashaman\\Logic\\repr;\nuse function Datashaman\\Logic\\rights;\n\n$es = [mkLeft('ERR'), mkRight('OK'), mkRight('OK Too'), mkLeft('ERR 13')];\n\necho repr(rights($es)) . PHP_EOL;\n",
            "output": "<List_ [<Right \"OK\">, <Right \"OK Too\">]>\n",
            "return": null,
            "summary": "<p>Return a List_ of the rights in a list of eithers.<\/p>",
            "gist": "https:\/\/gist.github.com\/6008a24085546d0364d0d10a31e24053"
        }
    ],
    "predicates": [
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "class",
                    "type": "string",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "x",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "predicates",
            "header": "isClass(string $class, $x)",
            "name": "Datashaman\\Logic\\isClass",
            "href": "#isClass",
            "shortName": "isClass"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "type",
                    "type": "string",
                    "variadic": false
                },
                {
                    "default": null,
                    "description": null,
                    "name": "x",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "predicates",
            "header": "isType(string $type, $x)",
            "name": "Datashaman\\Logic\\isType",
            "href": "#isType",
            "shortName": "isType"
        },
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "args",
                    "type": false,
                    "variadic": true
                }
            ],
            "file": "predicates",
            "header": "mkPredicate(...$args)",
            "name": "Datashaman\\Logic\\mkPredicate",
            "href": "#mkPredicate",
            "shortName": "mkPredicate"
        }
    ],
    "chain": [
        {
            "arguments": [
                {
                    "default": null,
                    "description": null,
                    "name": "value",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "chain",
            "header": "mkChain($value)",
            "name": "Datashaman\\Logic\\mkChain",
            "href": "#mkChain",
            "shortName": "mkChain"
        }
    ],
    "list": [
        {
            "arguments": [
                {
                    "default": "[]",
                    "description": null,
                    "name": "value",
                    "type": false,
                    "variadic": false
                }
            ],
            "file": "list",
            "header": "mkList($value = [])",
            "name": "Datashaman\\Logic\\mkList",
            "href": "#mkList",
            "shortName": "mkList"
        }
    ]
}
