#!/usr/bin/env php
<?php

require_once 'vendor/autoload.php';

use Cache\Adapter\Redis\RedisCachePool;
use Dotenv\Dotenv;
use Github\Client;
use phpDocumentor\Reflection\DocBlockFactory;
use Webmozart\Assert\Assert;

$cwd = getcwd();

$dotenv = Dotenv::create($cwd);
$dotenv->load();

$whitelist = explode(',', getenv('DOCS_NAMESPACE_WHITELIST'));
$options = getopt('o:', ['gists']);

$args = array_merge(
    [$argv[0]],
    array_slice($argv, count($options) + 1)
);

if (empty($whitelist) && count($args) < 2) {
    print "Usage: {$argv[0]} [-o filename] [--gists] [namespace ...]\n";
    exit(1);
}

if (isset($options['gists'])) {
    $client = new Redis();
    $client->connect('127.0.0.1', 6379);

    $pool = new RedisCachePool($client);

    $client = new Client();
    $client->addCache($pool);

    $client->authenticate(getenv('DOCS_GITHUB_TOKEN'), null, Client::AUTH_URL_TOKEN);

    $gists = $client->api('user')->gists(getenv('DOCS_GITHUB_USERNAME'));

    $indexedGists = [];

    foreach ($gists as $gist) {
        foreach ($whitelist as $ns) {
            $ns = str_replace('\\', '\\\\', $ns);

            if (preg_match("#^($ns\\\\.+) Example$#", $gist['description'], $match)) {
                $indexedGists[$match[1]] = $gist;
                break;
            }
        }
    }
}

$whitelist = array_merge(
    $whitelist,
    array_slice($args, 1)
);

$namespaces = [];

function getDocBlock($function)
{
    $factory = DocBlockFactory::createInstance();
    $docComment = $function->getDocComment();

    return $docComment
        ? $factory->create($docComment)
        : null;
}

function recursive_sort(&$array) {
    foreach ($array as $k => &$v) {
        if (is_array($v)) {
            recursive_sort($v);
        }
    }

    return sort($array);
}

function transformClass($class)
{
    global $cwd;

    $classDocBlock = getDocBlock($class);

    $filename = preg_replace("#^{$cwd}/#", '', $class->getFilename());

    $classType = 'class';

    if ($class->isInterface()) {
        $classType = 'interface';
    }

    if ($class->isTrait()) {
        $classType = 'trait';
    }

    $properties = [];

    foreach ($class->getProperties() as $property) {
        $result = [
            'name' => $property->getName(),
            'modifiers' => [
                'private' => $property->isPrivate(),
                'protected' => $property->isProtected(),
                'public' => $property->isPublic(),
                'static' => $property->isStatic(),
            ],
            'type' => 'mixed',
        ];

        $docBlock = getDocBlock($property);

        if ($docBlock) {
            $tags = $docBlock->getTagsByName('var');

            if ($tags) {
                $result['type'] = (string) $tags[0]->getType();
            }

            $result['summary'] = $docBlock->getSummary();
        }

        $properties[] = $result;
    }

    $methods = [];

    foreach ($class->getMethods() as $method) {
        $methods[] = transformMethod($method);
    }

    $result = [
        '_type' => $classType,
        'endLine' => $class->getEndLine(),
        'filename' => $filename,
        'interfaces' => array_map(
            function ($i) {
                return transform($i, 'transformClass', 1, 1);
            },
            array_values($class->getInterfaces())
        ),
        'methods' => $methods,
        'name' => $class->getName(),
        'properties' => $properties,
        'shortName' => $class->getShortName(),
        'startLine' => $class->getStartLine(),
        'traits' => array_map(
            function ($t) {
                return transform($t, 'transformClass', 1, 1);
            },
            $class->getTraits()
        ),
    ];

    $parentClass = $class->getParentClass();
    if ($parentClass) {
        $result['parentClassName'] = $parentClass->getName();
        $result['parentClassShortName'] = $parentClass->getShortName();

        if (inWhitelist($parentClass->getName())) {
            $result['parentClass'] = transform($parentClass, 'transformClass');
        }
    }

    if ($classDocBlock) {
        $result['summary'] = $classDocBlock->getSummary();
    }

    return $result;
}

function getParamTag($function, $name)
{
    $docBlock = getDocBlock($function);

    if ($docBlock) {
        $tags = $docBlock->getTagsByName('param');

        $tags = array_values(array_filter(
            $tags,
            function ($tag) use ($name) {
                return $tag->getVariableName() === $name;
            }
        ));

        if ($tags) {
            return $tags[0];
        }
    }
}

function transformParameter($param, $function)
{
    $result = [
        'name' => $param->getName(),
        'position' => $param->getPosition(),
        'type' => (string) $param->getType() ?: 'mixed',
        'modifiers' => [
            'array' => $param->isArray(),
            'callable' => $param->isCallable(),
            'defaultValueAvailable' => $param->isDefaultValueAvailable(),
            'defaultValueConstant' => $param->isDefaultValueAvailable() && $param->isDefaultValueConstant(),
            'optional' => $param->isOptional(),
            'passedByReference' => $param->isPassedByReference(),
            'variadic' => $param->isVariadic(),
        ],
    ];

    $tag = getParamTag($function, $param->getName());

    if ($tag) {
        $tagType = (string) $tag->getType();

        if ($tagType) {
            $result['type'] = $tagType;
        }

        $result['description'] = (string) $tag->getDescription();
    }

    $class = $param->getClass();

    if ($class) {
        $result['class'] = $class->getName();
    }

    if ($param->isDefaultValueAvailable()) {
        $result['defaultValue'] = $param->getDefaultValue();
    }

    if ($param->isDefaultValueAvailable() && $param->isDefaultValueConstant()) {
        $result['defaultValueConstantName'] = $param->getDefaultValueConstantName();
    }

    return $result;
}

function getExample($docBlock)
{
    $description = (string) $docBlock->getDescription();

    if (preg_match('#<pre>\s*(.*)\s*</pre>#s', $description, $match)) {
        return str_replace('\\/', '/', $match[1]);
    }
}

function getOutput(string $example)
{
    $output = '';

    ob_start();

    try {
        eval($example);
    }

    catch (Exception $e) {
        $output .= (string) $e . "\n";
    }

    finally {
        $output = ob_get_contents() . $output;
        ob_end_clean();
    }

    return $output;
}

function getGist($function)
{
    global $client, $indexedGists;

    $code = <<<CODE
<?php
<<<CONFIG
packages:
- "datashaman/logic: dev-master"
CONFIG;
#
# This is a Melody script. http://melody.sensiolabs.org/
#

{$function['example']}
CODE;

    $description = $function['name'] . ' Example';

    $params = [
        'description' => $description,
        'files' => [
            $description => [
                'content' => $code,
            ],
        ],
        'public' => true,
    ];

    if (isset($indexedGists[$function['name']])) {
        $gist = $indexedGists[$function['name']];
        $contents = file_get_contents($gist['files'][$description]['raw_url']);

        if ($contents !== $code) {
            $gist = $client->api('gists')->update($gist['id'], $params);
        }
    } else {
        $gist = $client->api('gists')->create($params);
    }

    return $gist['html_url'];
}

function transformFunction($function)
{
    global $cwd, $options;

    $filename = preg_replace("#^{$cwd}/#", '', $function->getFilename());

    $result = [
        '_type' => 'function',
        'endLine' => $function->getEndLine(),
        'filename' => $filename,
        'name' => $function->getName(),
        'parameters' => array_map(
            function ($param) use ($function) {
                return transformParameter($param, $function);
            },
            $function->getParameters()
        ),
        'returnType' => (string) $function->getReturnType(),
        'shortName' => $function->getShortName(),
        'startLine' => $function->getStartLine(),
    ];

    $docBlock = getDocBlock($function);

    if ($docBlock) {
        $result['summary'] = $docBlock->getSummary();

        $tags = $docBlock->getTagsByName('return');

        if ($tags) {
            $result['returnType'] = (string) $tags[0]->getType();
        }

        $example = getExample($docBlock);

        if ($example) {
            $result['example'] = $example;
            $result['output'] = getOutput($result['example']);

            if (isset($options['gists'])) {
                $result['gist'] = getGist($result);
            }
        }
    }

    return $result;
}

function transformMethod($method)
{
    global $options;

    $result = [
        'name' => $method->getName(),
        'modifiers' => [
            'abstract' => $method->isAbstract(),
            'final' => $method->isFinal(),
            'generator' => $method->isGenerator(),
            'private' => $method->isPrivate(),
            'protected' => $method->isProtected(),
            'public' => $method->isPublic(),
            'static' => $method->isStatic(),
            'variadic' => $method->isVariadic(),
        ],
        'parameters' => array_map(
            function ($param) use ($method) {
                return transformParameter($param, $method);
            },
            $method->getParameters()
        ),
        'returnType' => (string) $method->getReturnType(),
    ];

    $docBlock = getDocBlock($method);

    if ($docBlock) {
        $result['summary'] = $docBlock->getSummary();
        $result['description'] = (string) $docBlock->getDescription();

        $tags = $docBlock->getTagsByName('return');

        if ($tags) {
            $result['returnType'] = (string) $tags[0]->getType();
        }

        $example = getExample($docBlock);

        if ($example) {
            $result['example'] = $example;
            $result['output'] = getOutput($result['example']);

            if (isset($options['gists'])) {
                $result['gist'] = getGist($result);
            }
        }
    }

    return $result;
}

function transform($entity, callable $f, ...$args)
{
    $namespace = $entity->getNamespaceName();

    $result = $f($entity, ...$args);
    $result['ns'] = $namespace;

    return $result;
}

function addToNamespaces($entity)
{
    global $namespaces;

    $namespace = $entity['ns'];

    if (!isset($namespaces[$namespace])) {
        $namespaces[$namespace] = [];
    }

    $namespaces[$namespace][] = $entity;
}

function inWhitelist($name)
{
    global $whitelist;

    foreach ($whitelist as $ns) {
        $ns = str_replace('\\', '\\\\', $ns);

        if (preg_match("#^{$ns}#i", $name)) {
            return true;
        }
    }

    return false;
}

foreach(get_declared_classes() as $name) {
    if (inWhitelist($name)) {
        $class = new ReflectionClass($name);
        addToNamespaces(transform($class, 'transformClass'));
    }
}

$functions = get_defined_functions(true);

foreach($functions['user'] as $name) {
    if (inWhitelist($name)) {
        $function = new ReflectionFunction($name);
        addToNamespaces(transform($function, 'transformFunction'));
    }
}

foreach (get_declared_interfaces() as $name) {
    // TODO
}

foreach (get_declared_traits() as $name) {
    // TODO
}

$json = json_encode($namespaces, JSON_PRETTY_PRINT);

if (isset($options['o'])) {
    file_put_contents($options['o'], $json);
} else {
    echo $json . PHP_EOL;
}
